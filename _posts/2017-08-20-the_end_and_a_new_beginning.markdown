---
layout: post
title:  "The End and a New Beginning "
date:   2017-08-20 01:05:54 +0000
---

Just a few months ago, I wrote a post about why I had decided to pick up full-stack development by enrolling in Flatiron School's Full-Stack Development course.  At that point, looking at the syllabus/tracks made me feel hopeless, for there seemed to be pages upon pages of new topics to conquer.  Indeed, I thought to myself at that point... "Wow, this course may actually take me close to a year to finish.  I never thought it would take less than three months to finish all five portfolio projects!  This blog post is not an ordinary.  It may read like a review of the course, but that certainly is the not point of this post.  In fact, the main point is to reflect on what I had learned in past three months or so, and how it has turned me into a more proficient programmer.

The first section was the Ruby CLI App section.  I already had prior understanding of OO Ruby, so I was able to quickly progress through these modules.  I found the lessons and labs to be very comprehensive, and even though I came in with prior experiences, few topics were completely new to me!  This section also had a module on CSS/HTML and Git.  I can completely understand why Git was covered before the first project was assigned, but even to this day, I do not fully understand why CSS and HTML was covered when the first app was just a CLI.  The only 'view' for this project was via the console.  Of course, now I am saying the above statement after having finished the entire course, so it is also entirely possible that prior knowledge of CSS and HTML may actually have helped me solidify my knowledge of procedural and OO ruby as well.  Now, as for the portfolio project itself, I mentioned that I had felt uneasy about scraping data from another website in my second post, but looking back now, because scraping a website was a completely new thing for me, I learned a ton from scraping a website.  While my uneasiness still remains, it was a great experience creating a Ruby Gem in the process.

The second section was an interesting one.  I always enjoy learning some foundations before jumping into something more advanced, so having to go through SQL, ORM and ActiveRecord, and Rack before even stepping into Sinatra was a very good and exciting for me.  In fact, if those sections were not there, I may still be wondering about all the 'magic' behind Sinatra such as... 'Why do I not have to write actual SQL statements to manipulate data from the database?'  and 'How does routing actually work?'  ActiveRecord and a lightweight Rack apps really helped me solidify my foundation, so when I finally started learning Sinatra, I had much easier time understanding how a Sinatra app works.  Thus, when I started writing my Money Manager app, I knew exactly where to start, and I knew exactly what to do to fix all errors and bugs in my app.

When I think back on the third section, there is one thing that comes to my mind immediately: the hours I spent learning nested forms in Rails.  Up to this point, I never had to spent more than fifteen minutes learning a topic, but these nested forms gave me a lot of issues.  I quickly found out that the reason why I was having so much issue.  The reason was that I did not yet have a clear understanding on how to incorporate model collaboration inside my form_fors and fields_for.  For example, say that I'm making a Recipe app.  As one can imagine, a recipe has many ingredients.  For the longest time, I hadn't fully grasped the understanding of some_recipe.ingredients.build and the fact that I actually had to create a method in the model that will accept nested attributes.  It had me pondering why my form was making my app crash, and when I finally figured it out, it made me feel so good, for I had just conquered something that I couldn't figure out for hours.  This is also when I found out that there's no substitute for practicing by making an app.  I can watch 1000s of videos on how to make a Rails app, but until I struggle through building one myself, I won't actually truly understand how to build an app.

Now, the fourth section was an odd one.  There were modules on jQuery, JavaScript, and incorporating HTML/CSS on the app.  I did not find the lessons and the labs in this section particularly challenging.  In fact, no part of this section had me stumped for more than twenty minutes.  Everything I learned such as event handling and making asynchronous API requests seemed natural and straightforward.  However, while creating my app, I ran into a problem while creating a feature that allows a user to sift through a list of participants without reloading the page.  There were a large number of local variables to keep of, and because of how I had started naming those variable at first, I spent few hours wondering why when I click on the 'next participant' button, none of the data were being updated.  In the end, I struggled through and persevered, and my app ended up looking a lot more exciting because I refused to give up.

Finally, the last section: React and Redux.  I honestly felt that this section was several times harder than any of the previous sections.  Some parts had me stuck for hours, and in some cases, I was so frustrated that I had to take a short break so that I won't go crazy.  The most of the frustration came when incorporating Redux.  MapStateToProps, knowing what to import to create the Redux Store, knowing how and when to dispatch actions, remembering to add reducers to the Redux store, and etc... It felt like there were so many steps to get an app working.  I had to re-read some lectures more than once to understand what was really happening when I dispatch an action from a component.  In addition, I decided to put in a signup/login/logout section in my app, and this section took me over three hours to fully comprehend.  For example, I realized that when reloading the web page, I was automatically logged out, and I realized that I had to use localStorage or a cookie to save and fetch a user's info.  No other project has pushed me as much as this one, and deploying both the backend Rails API and the frontend React App had me frustrated as well.  In fact, one very mysterious issue I had with pushing React App to Heroku was that, even though Heroku was telling me that there were no errors, Heroku refused to show me the updated changes.  After spending over three hours researching, I eventually decided to remove the Heroku remote from my React App and create a new Heroku app.  Surprisingly, creating a new one fixed all issues, and the app works perfectly fine now.

This was a quite the journey.  I can honestly say that I like challenges, and I have begun to really enjoy pushing myself through frustration and stress.  Now that I finished the course, there are some more things that I would like to pursue.  I really want to learn how to write good tests for both my frontend and the backend.  Next, I want to continue to work on my React/Redux portfolio app.  I wanted that to be an ecommerce app, and right now, it's just a catalog app.  I'm going to take the rest of today and Sunday off, and starting Monday, I want to see if I can write out some more features on my ecommerce app.  Programming is so much fun, and looking back now, I can definitely say that not only am I a much better programmer now, but my passions for coding has increased tenfold.  Thus, one journey has now ended, but that is okay, because a new one is about to start.  I'll continue to keep posting here, so feel free to check back regularly to see what I'm up to!
