---
layout: post
title:  "Ecommerce React App with Rails backend"
date:   2017-08-18 21:47:45 +0000
---

Wow, it has been so long since I last posted.  Excuse me about that; I was on a two-and-half week family vacation.  Okay, I know... You are not here to read about my family vacation, so here is my fifth (and final) app for Flatiron School.  Okay, first of all, both the React front-end and rails back-end are hosted on Heroku (on two separate sites), so if you would like to mess around with my React app before reading this, please feel free to do so (https://ecommerce-fp-appl.herokuapp.com).  I guess I could have also provided the Heroku link for the back-end, but since it is not nearly as exciting to mess around with, I'll just skip it.  Now, why an Ecommerce app?  I thought building an Ecommerce app would be a good challenge for me.  I would need to deal with authentication, and I would need to connect several models and components to make it work.  It certainly was a very hard app to build as my very first React app, but I think I did a fair job at it!

This app will put the user on the home page if the user visits the root page.  Unlike my previous app, a user does not need to logged in to access most of the links on this app.  Everyone who visits the site can look at the Categories and items that are up for sale.  However, in order to add those items to a cart or to checkout that cart, the user must be logged in to do so.  Why force the user to log in before adding an item to cart?  Well, users will need to login to checkout the cart at the end anyway, so why not just ask the user to login before adding the item?  Hm, this may change in future.  In addition, users can add new items to the Items collection, but this feature may be restricted to different type of users in future releases of this app.  

In addition, I incorporated Redux to manage my states.  Even though Redux introduces extra bit of complexity to my app (and in the beginning Redux did slow down my progress), in the end, I found that Redux was so convenient that it actually helped me make progress quicker.  Also, this app has some styling using CSS.  I opted to not use Bootstrap, even though using Bootstrap may have made my life easier.  I find that using custom CSS forces me to learn more, and it also allows me to make the styling extremely customizable. As for how I did my styling, I imported Aphordite to do some inline styling instead of using a css file.  
 
One part of this project that gave me quite a bit headache was deploying my React app to Heroku.  For some reason, after pushing my client-side (React) code to Heroku, even though Heroku told me that there were no errors, the changes would not show up on the app.  In the end, I had to remove Heroku from my React app, and create a new Heroku app.  Surprising, re-creating instantly fixed the issue.  I'm still in process of finding a better solution.  Deleting an app is very dangerous!

This was the most time consuming app I have ever created.  I felt that learning React and Redux was far more difficult than learning Rails, JavaScript, and pretty much everything else I learned at Flatiron School combined.  Even though it was challenging, my burning desire to conqure anything I had started pushed me all the way to this point.  Now that I have become so much more proficient at making a React app, I can't wait to improve this app by adding even more functionalities.  Be sure to check out this app in a few weeks to see where it is.  I am planning on working on this app even after I graduate from Flatiron School!
