---
layout: post
title:  "Event Manager Rails App"
date:   2017-07-01 00:02:42 +0000
---

 
I can't believe how far I've come already in my development journey!  It seemed like two weeks ago, I pondered at the marvels of Ruby syntax.  Now, I created a full app already.  Before I get carried away, it is true.  It does not yet have any styling, but I think the app behaves pretty well.  I am overall very satisfied with where the app is now.  So, why did I make an event manager app?  Well, I like scheduling tasks and events; I often spend too much time creating the perfect routine and schedule.  Because I like scheduling events, I thought it may be a great idea to make an app that can facilitate my desire of scheduling my life.  
 
This app is must more sophisticated than my Sinatra app.  It uses many complex rails concepts such as nested routes and nested forms.  Once again, a user must be logged in to access anything but the main home screen, sign-up, and sign-in screens.  On the other hand, once logged in, user can't access those same three pages as well.  What's the point of visiting the sign-up page while logged in, right?  That would make no sense at all!  Moving on, upon logging in, users can create participants, locations, or events.  No one can see other user's participants, locations, or events, so your secret events will continue to stay secret.  Next, there are ton of AR validation; however, this app does not attempt to cover all possible scenarios.  That would take a very long time to develop.  Now, participants and locations use simple form to create data, but events use fairly complex nested form so that a user can create a new location to go with the event and/or create up to 25 new participants to be part of the event.  In addition, if a user deletes a location, all events that were associated with that location will also be deleted.  Don't worry though, users are always asked to confirm any destructive actions.   
 
As always, there are good old redirects when attempting to access pages that do not belong to that user.  In addition, I pondered about using Devise gem, but in the end, I decided to just roll out my own authentication system with bcrypt instead.  The goal of this app, security-wise, is to defend against users who want to snoop other users contents.  If anyone tries to be smart and attempts to access another userâ€™s events, that user will be given an error screen.  Let's not try accessing something that do not belong to us, right?
 
This was an extremely time consuming app.  I spent probably well over 10 hours on this app (compared to Sinatra app, which I spent roughly 3 hours).  I had made a simple spelling error on my nested forms, and that took over an hour to troubleshoot.  Yes, that was frustrating, but the end result was exhilarating.  Likewise, nested routes also took me a bit of time, but once again, I persevered and conquered that as well.  Overall, this project was hard, but it was very rewarding.  I'm excited to see what my next project would look like!
